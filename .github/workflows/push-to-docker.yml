name: CI/CD for TypeScript App with Docker

on:
  push:
    branches:
      - main 
  pull_request:
    branches:
      - main 

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20  # Specify your Node.js version

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test  # Runs only after the 'test' job is successful

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Set this in your GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # Set this in your GitHub Secrets

      - name: Build Docker Image
        run: |
          docker build --build-arg DATABASE_RETAILSTORE_URL=${{ secrets.DATABASE_RETAILSTORE_URL }} -t ${{ secrets.DOCKER_USERNAME }}/retail-store-app-backend:latest .

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/retail-store-app-backend:latest

  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build  # Runs after the 'build' job is successful

    steps:
      - name: Set up SSH for Deployment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROD_SERVER_IP }} 
          username: ${{ secrets.PROD_SSH_USERNAME }}  
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          port: 22  
          script: |
            # Pull the latest Docker image from Docker Hub
            docker pull ${{ secrets.DOCKER_USERNAME }}/retail-store-app-backend:latest

            # Stop the currently running container (if any)
            docker stop retail-store-app-backend || true

            # Remove the old container (if any)
            docker rm retail-store-app-backend || true

            # Run the new Docker container
            docker run -d -p 5999:5999 \
              --name retail-store-app-backend \
              -e PORT=${{ secrets.PORT }} \
              -e ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }} \
              -e REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }} \
              ${{ secrets.DOCKER_USERNAME }}/retail-store-app-backend:latest